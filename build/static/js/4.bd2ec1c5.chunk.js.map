{"version":3,"sources":["components/pages/ByIngredientPage.module.css","components/pages/ByIngridientPage.js"],"names":["module","exports","ByIngridientPage","history","useHistory","params","useParams","useState","idIngredient","strIngredient","ingList","setIngList","meals","setMeals","ingredient","setIng","fetchError","setfetchError","useEffect","fetchByIng","a","filterByIngredient","data","length","console","log","fetchIng","catch","error","message","param","ingLister","changeURL","push","className","classes","errorMessage","selDesc","selector","id","value","onChange","e","target","onBlur","map","ing"],"mappings":"sHACAA,EAAOC,QAAU,CAAC,aAAe,uCAAuC,QAAU,kCAAkC,SAAW,qC,gIC0FhHC,UArFU,WACvB,IAAMC,EAAUC,cACVC,EAASC,cACf,EAA8BC,mBAAS,CACrC,CAAEC,aAAc,IAAKC,cAAe,aADtC,mBAAOC,EAAP,KAAgBC,EAAhB,KAGA,EAA0BJ,mBAAS,IAAnC,mBAAOK,EAAP,KAAcC,EAAd,KACA,EAA6BN,mBAAS,IAAtC,mBAAOO,EAAP,KAAmBC,EAAnB,KACA,EAAoCR,qBAApC,mBAAOS,EAAP,KAAmBC,EAAnB,KAMAC,qBAAU,WACR,IAAMC,EAAU,uCAAG,4BAAAC,EAAA,sEACEC,YAAmBP,GADrB,UACXQ,EADW,OAES,IAAtBR,EAAWS,OAFE,oDAGJ,OAATD,EAHa,0EAIVT,EAASS,IAJC,2CAAH,qDAMG,KAAfR,IACFU,QAAQC,IAAI,eACZC,IAAWC,OAAM,SAACC,GAChBX,EAAcW,EAAMC,aAGpBxB,EAAOyB,OACTf,EAAOV,EAAOyB,OAEhBX,IAAaQ,OAAM,SAACC,GAClBX,EAAcW,EAAMC,YAEH,KAAff,GACFC,EAAO,UAER,CAACD,EAAYT,IAEhB,IAAMqB,EAAQ,uCAAG,4BAAAN,EAAA,sEACIW,cADJ,OACTT,EADS,OAEfX,EAAWW,GAFI,2CAAH,qDAIRU,EAAY,WAChB7B,EAAQ8B,KAAK,kBAGf,OAAIjB,EAEA,qBAAKkB,UAAWC,IAAQC,aAAxB,SACE,kCAAKpB,OAMT,qCACE,qBAAKkB,UAAWC,IAAQE,QAAxB,qCACA,qBAAKH,UAAWC,IAAQG,SAAxB,SACE,yBACEC,GAAG,WACHC,MAAO1B,EACP2B,SAAU,SAACC,GACT3B,EAAO2B,EAAEC,OAAOH,OAChBR,KAEFY,OAAQ,SAACF,GACP3B,EAAO2B,EAAEC,OAAOH,OAChBR,KATJ,UAYE,2BACCtB,EAAQmC,KAAI,SAACC,GAAD,OACX,wBAAQN,MAAOM,EAAIrC,cAAnB,SACGqC,EAAIrC,eADgCqC,EAAItC,sBAMjD,8BACE,cAAC,IAAD,CAAUI,MAAOA","file":"static/js/4.bd2ec1c5.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"errorMessage\":\"ByIngredientPage_errorMessage__2mKK1\",\"selDesc\":\"ByIngredientPage_selDesc__50DGC\",\"selector\":\"ByIngredientPage_selector__34Jbv\"};","import { ingLister, filterByIngredient } from \"../MealDB/MealDB\";\r\nimport { useParams, useHistory } from \"react-router-dom\";\r\nimport { useEffect, useState } from \"react\";\r\nimport MealList from \"../Meals/MealList\";\r\nimport classes from \"./ByIngredientPage.module.css\";\r\n\r\nconst ByIngridientPage = () => {\r\n  const history = useHistory();\r\n  const params = useParams();\r\n  const [ingList, setIngList] = useState([\r\n    { idIngredient: \"1\", strIngredient: \"Chicken\" },\r\n  ]);\r\n  const [meals, setMeals] = useState([]);\r\n  const [ingredient, setIng] = useState(\"\");\r\n  const [fetchError, setfetchError] = useState();\r\n\r\n  // fetchRandomMeals().catch((error) => {\r\n  //   setfetchError(error.message);\r\n  // });\r\n\r\n  useEffect(() => {\r\n    const fetchByIng = async () => {\r\n      const data = await filterByIngredient(ingredient);\r\n      if (ingredient.length === 0) return;\r\n      if (data === null) return; // No meals ava. - can make whole error handling here...\r\n      return setMeals(data);\r\n    };\r\n    if (ingredient === \"\") {\r\n      console.log(\"fetching...\");\r\n      fetchIng().catch((error) => {\r\n        setfetchError(error.message);\r\n      });\r\n    }\r\n    if (params.param) {\r\n      setIng(params.param);\r\n    }\r\n    fetchByIng().catch((error) => {\r\n      setfetchError(error.message);\r\n    });\r\n    if (ingredient === \"\") {\r\n      setIng(\"Beef\");\r\n    }\r\n  }, [ingredient, params]);\r\n\r\n  const fetchIng = async () => {\r\n    const data = await ingLister();\r\n    setIngList(data);\r\n  };\r\n  const changeURL = () => {\r\n    history.push(\"/ingredients/\");\r\n  };\r\n\r\n  if (fetchError) {\r\n    return (\r\n      <div className={classes.errorMessage}>\r\n        <p> {fetchError}</p>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <div className={classes.selDesc}> Select an ingredient: </div>\r\n      <div className={classes.selector}>\r\n        <select\r\n          id=\"category\"\r\n          value={ingredient}\r\n          onChange={(e) => {\r\n            setIng(e.target.value);\r\n            changeURL();\r\n          }}\r\n          onBlur={(e) => {\r\n            setIng(e.target.value);\r\n            changeURL();\r\n          }}\r\n        >\r\n          <option />\r\n          {ingList.map((ing) => (\r\n            <option value={ing.strIngredient} key={ing.idIngredient}>\r\n              {ing.strIngredient}\r\n            </option>\r\n          ))}\r\n        </select>\r\n      </div>\r\n      <div>\r\n        <MealList meals={meals} />\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ByIngridientPage;\r\n"],"sourceRoot":""}